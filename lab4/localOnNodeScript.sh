#!/usr/bin/env bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
NC='\033[0m'

INPUT_SIZES=(128 131072 134217728)
REPEATS=10
EXECUTABLES_SOURCE=(
  first=first.cu
  second=second.cu
  third=third.cu
  fourth=fourth.cu
)
BIN_DIR="bin_local_test"
CSV_RESULTS_FILE="made_with_love_by_demorgan.csv"

log() {
  echo -e "[${CYAN}$(date '+%F %T')${NC}] $*"
}
error() {
  echo -e "[${CYAN}$(date '+%F %T')${NC}] ${RED}ERROR:${NC} $*" >&2
  exit 1
}

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CUDA –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ (nvcc)..."
if ! command -v nvcc &> /dev/null; then
  error "nvcc (CUDA Compiler) –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CUDA Toolkit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ nvcc –≤ –≤–∞—à–µ–º PATH."
fi
log "${GREEN}nvcc –Ω–∞–π–¥–µ–Ω.${NC}"

log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${BIN_DIR}"
mkdir -p "${BIN_DIR}" || error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ ${BIN_DIR}"

log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${CSV_RESULTS_FILE}"
echo "Program,InputSize,Attempt,TimeType,ExecutionTime_s,Status,ExitCode" > "${CSV_RESULTS_FILE}"

log "–ö–æ–º–ø–∏–ª—è—Ü–∏—è CUDA –ø—Ä–æ–≥—Ä–∞–º–º..."
declare -A COMPILED_EXECUTABLES

for item in "${EXECUTABLES_SOURCE[@]}"; do
  name=${item%%=*}
  src_file=${item#*=}
  output_exe="${BIN_DIR}/${name}"

  if [[ ! -f "$src_file" ]]; then
    log "${YELLOW}–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª $src_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –¥–ª—è $name.${NC}"
    continue
  fi

  log "‚ñ∏ –ö–æ–º–ø–∏–ª—è—Ü–∏—è $name –∏–∑ $src_file –≤ $output_exe"
  if nvcc -arch=sm_35 -O3 "$src_file" -o "$output_exe"; then
    log "${GREEN}‚úÖ $name —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.${NC}"
    COMPILED_EXECUTABLES["$name"]="$output_exe"
  else
    log "${RED}‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ $name –∏–∑ $src_file.${NC}"
    echo "$name,,N/A,CompilationFailed,,Error,N/A" >> "${CSV_RESULTS_FILE}"
  fi
done

if [ ${#COMPILED_EXECUTABLES[@]} -eq 0 ]; then
  log "${YELLOW}–ù–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –∏ ${CSV_RESULTS_FILE}.${NC}"
fi

log "${GREEN}–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.${NC}"
echo "-----------------------------------------------------"

log "–ó–∞–ø—É—Å–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ ${CSV_RESULTS_FILE}..."

for name_key in "${!COMPILED_EXECUTABLES[@]}"; do
  exe_path="${COMPILED_EXECUTABLES[$name_key]}"

  if [[ -z "$exe_path" || ! -x "$exe_path" ]]; then
    log "${YELLOW}–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã $name_key –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (–ø—É—Ç—å: '$exe_path'). –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞.${NC}"
    continue
  fi

  log "üöÄ ${GREEN}–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: $name_key (${exe_path})${NC}"
  for size in "${INPUT_SIZES[@]}"; do
    log "  ‚ñ∏ ${YELLOW}–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (N): $size${NC}"
    for attempt in $(seq 1 "$REPEATS"); do
      log "    ‚óè ${CYAN}–ü–æ–ø—ã—Ç–∫–∞: $attempt / $REPEATS${NC}"

      program_output=""
      exit_code=0
      status_message="Success"

      program_output=$("$exe_path" -n "$size" 2>&1)
      exit_code=$?

      if [ $exit_code -ne 0 ]; then
        status_message="Error"
        log "      ${RED}‚úó $name_key (N=$size, –ü–æ–ø—ã—Ç–∫–∞ $attempt) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exit_code).${NC}"
      else
        log "      ${GREEN}‚úì $name_key (N=$size, –ü–æ–ø—ã—Ç–∫–∞ $attempt) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ.${NC}"
      fi

      found_time_in_this_run=0
      echo "$program_output" | while IFS= read -r line; do
          time_value=""
          time_type=""

          if [[ "$line" == *"Sequential time:"* ]]; then
              time_value=$(echo "$line" | grep -oP 'Sequential time: \K[0-9]+\.[0-9]+')
              time_type="Sequential"
          elif [[ "$line" == *"Parallel time:"* ]]; then
              time_value=$(echo "$line" | grep -oP 'Parallel time: \K[0-9]+\.[0-9]+')
              time_type="Parallel"
          elif [[ "$line" == *"Parallel time (CUDA):"* ]]; then
              time_value=$(echo "$line" | grep -oP 'Parallel time \(CUDA\): \K[0-9]+\.[0-9]+')
              time_type="ParallelCUDA"
          fi

          if [[ -n "$time_type" && -n "$time_value" ]]; then
              echo "$name_key,$size,$attempt,$time_type,$time_value,$status_message,$exit_code" >> "${CSV_RESULTS_FILE}"
              found_time_in_this_run=1
          elif [[ -n "$time_type" && -z "$time_value" ]]; then
               echo "$name_key,$size,$attempt,$time_type,ExtractionError,$status_message,$exit_code" >> "${CSV_RESULTS_FILE}"
               found_time_in_this_run=1
          fi
      done
    done
    echo ""
  done
  echo "-----------------------------------------------------"
done

log "${GREEN}–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${CSV_RESULTS_FILE}${NC}"